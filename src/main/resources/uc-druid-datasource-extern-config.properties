#socket timeout的时间要大于事务执行的时间，事务执行的时间要大于单条语句执行的时间，
#如果要为事务设置单独的时间，请在@Transactional上添加timeout属性
#如果要为sql设置单独的时间，请在.xml文件中对sql添加timeout属性
#druid.name=callcenter
#druid.url=jdbc:mysql://54.223.199.121:3304/callcenter
#druid.username=abc
#druid.password=abc
#druid.driver-class-name=com.mysql.jdbc.Driver
#druid.type=com.alibaba.druid.pool.DruidDataSource
#druid.connectProperties=useUnicode=true;characterEncoding=utf-8;autoReconnect=true;connectTimeout=60000;socketTimeout=60000;
#druid.connectProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=10000;
#druid.connectProperties=connect.timeout=10000;network.timeout=10000;query.timeout=10000;page.timeout=10000;page.size=1000;
#初始化连接池数量
druid.initialSize=10
#最小连接池数量
druid.minIdle=10
#最大连接池数量
druid.maxActive=100
#从连接池获取连接等待超时的时间(毫秒)
druid.maxWait=30000
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
druid.validationQuery=SELECT 'x'
#连接检测间隔时间(毫秒)
druid.timeBetweenEvictionRunsMillis=60000
#连接空闲时的最小生存时间(毫秒)
druid.minEvictableIdleTimeMillis=300000
#连接空闲时的最大生存时间(毫秒)
druid.maxEvictableIdleTimeMillis=300000
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
druid.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
druid.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
druid.testOnReturn=false
#监控插件
druid.filters=stat
#慢SQL记录
druid.logSlowSql=true
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
druid.poolPreparedStatements=false
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
druid.maxPoolPreparedStatementPerConnectionSize=-1
#单条语句执行超时时间(秒)
druid.queryTimeout=10
#事务执行超时时间(秒)
druid.transactionQueryTimeout=30
